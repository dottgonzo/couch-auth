"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var index_1 = require("../index");
var rpj = require('request-promise-json');
var spawnPouchdbServer = require('spawn-pouchdb-server');
var testport = 8742;
var user0 = {
    user: 'testuser0',
    password: 'testpassw0',
    email: 'testuser0@test.tst'
};
var user1 = {
    user: 'testuser1',
    password: 'testpassw1',
    email: 'testuser1@test.tst'
};
var expect = chai.expect;
var Server;
var CouchAuth;
before(function (done) {
    this.timeout(20000);
    spawnPouchdbServer({
        port: testport,
        backend: false,
        config: {
            admins: { "adminuser": "adminpass" },
            file: false
        },
        log: {
            file: false,
            level: 'info'
        }
    }, function (error, server) {
        if (error) {
            throw error;
        }
        else {
            Server = server;
            CouchAuth = new index_1.default({
                hostname: 'localhost',
                protocol: 'http',
                port: testport,
                user: 'adminuser',
                password: 'adminpass'
            });
            setTimeout(function () {
                done();
            }, 1000);
        }
    });
});
describe("create an user", function () {
    this.timeout(20000);
    it("add a common user with no db", function (done) {
        CouchAuth.createUser('user0', 'password0', 'email0@email.aa').then(function (d) {
            expect(d).to.be.ok;
            done();
        }).catch(function (err) {
            console.log(err);
            done(Error(err));
        });
    });
});
describe("test app_main", function () {
    this.timeout(20000);
    it("verificate presence of app_main db", function (done) {
        rpj.get(CouchAuth.my('app_main')).then(function (d) {
            rpj.put(CouchAuth.my('app_main') + '/testdoctobepresent0', { _id: 'testdoctobepresent0', ee: true }).then(function (d) {
                expect(d).to.be.ok;
                expect(d).to.be.an('object');
                done();
            }).catch(function (err) {
                console.log(err);
                done(Error(err));
            });
        }).catch(function (err) {
            done(Error(err));
        });
    });
    it("verificate that app_main db is not public", function (done) {
        rpj.put(CouchAuth.publink + '/app_main/testdocnotbepresent0', { _id: 'testdocnotbepresent0', ee: true }).then(function (d) {
            done(Error(d));
        }).catch(function (err) {
            expect(err).to.be.ok;
            done();
        });
    });
    it("verificate that app_main db is not open to other users", function (done) {
        rpj.put(CouchAuth.for('user0', 'password0') + '/app_main/testdocnotbepresent0', { _id: 'testdocnotbepresent0', ee: true }).then(function (d) {
            done(Error(d));
        }).catch(function (err) {
            expect(err).to.be.ok;
            done();
        });
    });
    it("verificate admin user", function (done) {
        rpj.get(CouchAuth.my('_users/org.couchdb.user:' + 'adminuser')).then(function (d) {
            expect(d).to.be.ok;
            expect(d).to.have.property('name').that.eq('adminuser');
            expect(d).to.have.property('email');
            expect(d).to.have.property('roles').that.is.an('array');
            expect(d).to.have.property('db').that.is.an('array');
            done();
        }).catch(function (err) {
            done(Error(err));
        });
    });
});
describe("create a new closed app", function () {
    it("main admin add first app", function (done) {
        this.timeout(20000);
        CouchAuth.createClosedApp('testapp').then(function (d) {
            expect(d).to.be.ok;
            done();
        }).catch(function (err) {
            done(Error(err));
        });
    });
    it("unregistered users can't access", function (done) {
        this.timeout(20000);
        rpj.get(CouchAuth.publink + '/testapp/testdoctobepresent0').then(function (d) {
            done(Error(d));
        }).catch(function (err) {
            expect(err).to.be.ok;
            done();
        });
    });
    it("other users can't access", function (done) {
        this.timeout(20000);
        rpj.get(CouchAuth.for('user0', 'password0') + '/testapp/testdoctobepresent0').then(function (d) {
            done(Error(d));
        }).catch(function (err) {
            expect(err).to.be.ok;
            done();
        });
    });
});
describe("create a new ro app", function () {
    it("main admin add ro app", function (done) {
        this.timeout(20000);
        CouchAuth.createRoApp('testapp2').then(function (d) {
            rpj.put(CouchAuth.my('testapp2') + '/testdoctobepresent0', { _id: 'testdoctobepresent0', ee: true }).then(function (d) {
                expect(d).to.be.ok;
                expect(d).to.be.an('object');
                done();
            }).catch(function (err) {
                console.log(err);
                done(Error(err));
            });
        }).catch(function (err) {
            done(Error(err));
        });
    });
    it("unregistered users can access", function (done) {
        this.timeout(20000);
        rpj.get(CouchAuth.publink + '/testapp2/testdoctobepresent0').then(function (d) {
            expect(d).to.be.ok;
            done();
        }).catch(function (err) {
            console.log(err);
            done(Error(err));
        });
    });
    it("registered users can access", function (done) {
        this.timeout(20000);
        rpj.get(CouchAuth.for('user0', 'password0') + '/testapp2/testdoctobepresent0').then(function (d) {
            expect(d).to.be.ok;
            done();
        }).catch(function (err) {
            console.log(err);
            done(Error(err));
        });
    });
    it("unregistered users can't add docs", function (done) {
        this.timeout(20000);
        rpj.put(CouchAuth.publink + '/testapp2/cccn', { _id: 'cccn', aa: true }).then(function (d) {
            console.log(d);
            done(Error(d));
        }).catch(function (err) {
            expect(err).to.be.ok;
            done();
        });
    });
    it("registered users can't add docs", function (done) {
        this.timeout(20000);
        rpj.put(CouchAuth.for('user0', 'password0') + '/testapp2/cccb', { _id: 'cccb', aa: true }).then(function (d) {
            done(Error(d));
        }).catch(function (err) {
            expect(err).to.be.ok;
            done();
        });
    });
});
describe("users", function () {
    it("unregistered users can't add dbs", function (done) {
        this.timeout(20000);
        rpj.put(CouchAuth.publink + '/testapp3');
        setTimeout(function () {
            rpj.get(CouchAuth.my('testapp3')).then(function (d) {
                console.log('ee');
                done(new Error(d));
            }).catch(function (err) {
                expect(err).to.be.ok;
                done();
            });
        }, 5000);
    });
    it("registered users can't add dbs", function (done) {
        this.timeout(20000);
        rpj.put(CouchAuth.for('user0', 'password0') + '/testapp3');
        setTimeout(function () {
            rpj.get(CouchAuth.my('testapp3')).then(function (d) {
                console.log('ee');
                done(new Error(d));
            }).catch(function (err) {
                expect(err).to.be.ok;
                done();
            });
        }, 5000);
    });
});
after(function (done) {
    Server.stop(function () {
        done();
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
