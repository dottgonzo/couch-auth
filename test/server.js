"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var index_1 = require("../index");
var rpj = require('request-promise-json');
var spawnPouchdbServer = require('spawn-pouchdb-server');
var express = require("express");
var bodyParser = require("body-parser");
var testport = 8743;
var testexpressport = 8744;
var adminUser = {
    user: 'adminuser',
    password: 'adminpass'
};
var user0 = {
    user: 'testuser0',
    password: 'testpassw0'
};
var slaveuser = {
    user: 'slaveslave1',
    password: 'slavepassw1'
};
var expect = chai.expect;
var Server;
var aa = 'ss';
before(function (done) {
    this.timeout(20000);
    spawnPouchdbServer({
        port: testport,
        backend: false,
        config: {
            admins: { "adminuser": "adminpass" },
            file: false
        },
        log: {
            file: false,
            level: 'info'
        }
    }, function (error, server) {
        if (error) {
            throw error;
        }
        else {
            var CouchAccess = index_1.accessRouter({
                hostname: 'localhost',
                protocol: 'http',
                port: testport,
                user: adminUser.user,
                password: adminUser.password
            });
            var app = express();
            app.use(bodyParser.urlencoded({ extended: false }));
            app.use(bodyParser.json());
            app.use('/access', CouchAccess);
            app.listen(testexpressport, function () {
                setTimeout(function () {
                    done();
                }, 2000);
            });
        }
    });
});
describe("test express server", function () {
    it("exists", function (done) {
        rpj.get('http://localhost:' + testexpressport + '/access').then(function (a) {
            expect(a).to.be.ok;
            done();
        }).catch(function (err) {
            done(new Error(err));
        });
    });
    it("testadmin", function (done) {
        rpj.post('http://localhost:' + testexpressport + '/access/testadmin', { admin: adminUser }).then(function (a) {
            if (a && a.error) {
                done(new Error(a.error));
            }
            else {
                expect(a).to.be.ok;
                expect(a).to.have.property('ok').that.eq(true);
                done();
            }
        }).catch(function (err) {
            done(new Error(err));
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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S0FBSyxDQUFDLFVBQUMsR0FBRztZQUNULElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ3hCLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUE7SUFJRixFQUFFLENBQUMsV0FBVyxFQUFFLFVBQVUsSUFBSTtRQUUxQixHQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGVBQWUsR0FBRyxtQkFBbUIsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUM7WUFFL0YsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNmLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUU1QixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFBO2dCQUNsQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFFOUMsSUFBSSxFQUFFLENBQUE7WUFDVixDQUFDO1FBS0wsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztZQUVULElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBRXhCLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDLENBQUMsQ0FBQSIsImZpbGUiOiJ0ZXN0L3NlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1vY2hhIGZyb20gXCJtb2NoYVwiXG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gXCJjaGFpXCJcblxuaW1wb3J0IHsgYWNjZXNzUm91dGVyIH0gZnJvbSBcIi4uL2luZGV4XCJcblxuY29uc3QgcnBqID0gcmVxdWlyZSgncmVxdWVzdC1wcm9taXNlLWpzb24nKVxuY29uc3Qgc3Bhd25Qb3VjaGRiU2VydmVyID0gcmVxdWlyZSgnc3Bhd24tcG91Y2hkYi1zZXJ2ZXInKVxuXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCJcblxuaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIlxuXG5cbmNvbnN0IHRlc3Rwb3J0ID0gODc0M1xuXG5jb25zdCB0ZXN0ZXhwcmVzc3BvcnQgPSA4NzQ0XG5cblxuXG5jb25zdCBhZG1pblVzZXIgPSB7XG4gICAgdXNlcjogJ2FkbWludXNlcicsXG4gICAgcGFzc3dvcmQ6ICdhZG1pbnBhc3MnXG59XG5cbmNvbnN0IHVzZXIwID0ge1xuICAgIHVzZXI6ICd0ZXN0dXNlcjAnLFxuICAgIHBhc3N3b3JkOiAndGVzdHBhc3N3MCdcbn1cblxuY29uc3Qgc2xhdmV1c2VyID0ge1xuICAgIHVzZXI6ICdzbGF2ZXNsYXZlMScsXG4gICAgcGFzc3dvcmQ6ICdzbGF2ZXBhc3N3MSdcbn1cblxubGV0IGV4cGVjdCA9IGNoYWkuZXhwZWN0XG5cblxubGV0IFNlcnZlclxubGV0IGFhID0gJ3NzJ1xuXG5cblxuXG5cblxuYmVmb3JlKGZ1bmN0aW9uIChkb25lKSB7XG4gICAgdGhpcy50aW1lb3V0KDIwMDAwKVxuICAgIHNwYXduUG91Y2hkYlNlcnZlcihcbiAgICAgICAge1xuICAgICAgICAgICAgcG9ydDogdGVzdHBvcnQsXG4gICAgICAgICAgICBiYWNrZW5kOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGFkbWluczogeyBcImFkbWludXNlclwiOiBcImFkbWlucGFzc1wiIH0sXG4gICAgICAgICAgICAgICAgZmlsZTogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2c6IHtcbiAgICAgICAgICAgICAgICBmaWxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsZXZlbDogJ2luZm8nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvciwgc2VydmVyKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvclxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgICAgICBjb25zdCBDb3VjaEFjY2VzcyA9IGFjY2Vzc1JvdXRlcih7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RuYW1lOiAnbG9jYWxob3N0JyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6ICdodHRwJyxcbiAgICAgICAgICAgICAgICAgICAgcG9ydDogdGVzdHBvcnQsXG4gICAgICAgICAgICAgICAgICAgIHVzZXI6IGFkbWluVXNlci51c2VyLFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogYWRtaW5Vc2VyLnBhc3N3b3JkXG4gICAgICAgICAgICAgICAgfSlcblxuXG4gICAgICAgICAgICAgICAgY29uc3QgYXBwID0gZXhwcmVzcygpO1xuICAgICAgICAgICAgICAgIC8vIHBhcnNlIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICAgICAgICAgICAgICAgIGFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKVxuXG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgYXBwbGljYXRpb24vanNvblxuICAgICAgICAgICAgICAgIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpXG5cblxuICAgICAgICAgICAgICAgIGFwcC51c2UoJy9hY2Nlc3MnLCBDb3VjaEFjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICBhcHAubGlzdGVuKHRlc3RleHByZXNzcG9ydCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cblxuXG5cblxuXG5cbn0pXG5cbmRlc2NyaWJlKFwidGVzdCBleHByZXNzIHNlcnZlclwiLCBmdW5jdGlvbiAoKSB7XG5cblxuICAgIGl0KFwiZXhpc3RzXCIsIGZ1bmN0aW9uIChkb25lKSB7XG5cbiAgICAgICAgcnBqLmdldCgnaHR0cDovL2xvY2FsaG9zdDonICsgdGVzdGV4cHJlc3Nwb3J0ICsgJy9hY2Nlc3MnKS50aGVuKChhKSA9PiB7XG5cbiAgICAgICAgICAgIGV4cGVjdChhKS50by5iZS5va1xuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGRvbmUobmV3IEVycm9yKGVycikpXG4gICAgICAgIH0pXG4gICAgfSlcblxuXG5cbiAgICBpdChcInRlc3RhZG1pblwiLCBmdW5jdGlvbiAoZG9uZSkge1xuXG4gICAgICAgIHJwai5wb3N0KCdodHRwOi8vbG9jYWxob3N0OicgKyB0ZXN0ZXhwcmVzc3BvcnQgKyAnL2FjY2Vzcy90ZXN0YWRtaW4nLCB7IGFkbWluOiBhZG1pblVzZXIgfSkudGhlbigoYSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoYSAmJiBhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgZG9uZShuZXcgRXJyb3IoYS5lcnJvcikpXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmJlLm9rXG4gICAgICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmhhdmUucHJvcGVydHkoJ29rJykudGhhdC5lcSh0cnVlKVxuXG4gICAgICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgICB9XG5cblxuXG5cbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuXG4gICAgICAgICAgICBkb25lKG5ldyBFcnJvcihlcnIpKVxuXG4gICAgICAgIH0pXG5cbiAgICB9KVxuXG59KVxuXG4iXX0=
